// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, Metadata, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface CreateUserRequest {
  username: string;
  email: string;
}

export interface GetUserByIdRequest {
  id: number;
}

export interface User {
  id: number;
  username: string;
  email: string;
  createdAt: string;
}

export interface UsersResponse {
  users: User[];
}

export interface UserValidationResponse {
  exists: boolean;
  user: User | undefined;
}

export interface Empty {
}

export const USER_PACKAGE_NAME = "user";

function createBaseCreateUserRequest(): CreateUserRequest {
  return { username: "", email: "" };
}

export const CreateUserRequest: MessageFns<CreateUserRequest> = {
  encode(message: CreateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetUserByIdRequest(): GetUserByIdRequest {
  return { id: 0 };
}

export const GetUserByIdRequest: MessageFns<GetUserByIdRequest> = {
  encode(message: GetUserByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUser(): User {
  return { id: 0, username: "", email: "", createdAt: "" };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUsersResponse(): UsersResponse {
  return { users: [] };
}

export const UsersResponse: MessageFns<UsersResponse> = {
  encode(message: UsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUserValidationResponse(): UserValidationResponse {
  return { exists: false, user: undefined };
}

export const UserValidationResponse: MessageFns<UserValidationResponse> = {
  encode(message: UserValidationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.exists !== false) {
      writer.uint32(8).bool(message.exists);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserValidationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserValidationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.exists = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface UserServiceClient {
  createUser(request: CreateUserRequest, metadata?: Metadata): Observable<User>;

  getAllUsers(request: Empty, metadata?: Metadata): Observable<UsersResponse>;

  getUserById(request: GetUserByIdRequest, metadata?: Metadata): Observable<User>;

  validateUser(request: GetUserByIdRequest, metadata?: Metadata): Observable<UserValidationResponse>;
}

export interface UserServiceController {
  createUser(request: CreateUserRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;

  getAllUsers(request: Empty, metadata?: Metadata): Promise<UsersResponse> | Observable<UsersResponse> | UsersResponse;

  getUserById(request: GetUserByIdRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;

  validateUser(
    request: GetUserByIdRequest,
    metadata?: Metadata,
  ): Promise<UserValidationResponse> | Observable<UserValidationResponse> | UserValidationResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "getAllUsers", "getUserById", "validateUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  createUser: {
    path: "/user.UserService/CreateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserRequest): Buffer => Buffer.from(CreateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateUserRequest => CreateUserRequest.decode(value),
    responseSerialize: (value: User): Buffer => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer): User => User.decode(value),
  },
  getAllUsers: {
    path: "/user.UserService/GetAllUsers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: UsersResponse): Buffer => Buffer.from(UsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UsersResponse => UsersResponse.decode(value),
  },
  getUserById: {
    path: "/user.UserService/GetUserById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserByIdRequest): Buffer => Buffer.from(GetUserByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserByIdRequest => GetUserByIdRequest.decode(value),
    responseSerialize: (value: User): Buffer => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer): User => User.decode(value),
  },
  validateUser: {
    path: "/user.UserService/ValidateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserByIdRequest): Buffer => Buffer.from(GetUserByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserByIdRequest => GetUserByIdRequest.decode(value),
    responseSerialize: (value: UserValidationResponse): Buffer =>
      Buffer.from(UserValidationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserValidationResponse => UserValidationResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  createUser: handleUnaryCall<CreateUserRequest, User>;
  getAllUsers: handleUnaryCall<Empty, UsersResponse>;
  getUserById: handleUnaryCall<GetUserByIdRequest, User>;
  validateUser: handleUnaryCall<GetUserByIdRequest, UserValidationResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
